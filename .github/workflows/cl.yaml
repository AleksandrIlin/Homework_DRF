name: CI

on: [push, pull_request]


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | 
          sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "/usr/local/bin" >> $GITHUB_PATH  # Добавляем путь к docker-compose в PATH


      - name: Check Docker Compose version
        run: |
          docker-compose --version

      - name: Install dependencies
        run: |
          pip install flake8  # Установите линтер
          flake8 .  # Запустите линтинг

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          poetry install --no-root

      

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD '12345';"
          sudo -u postgres psql -c "CREATE DATABASE lesson;"
          sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD '12345';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE lesson TO runner;"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"

      - name: Run makemigrations
        run: |
          poetry run python manage.py makemigrations

      - name: Run migrate
        run: |
          poetry run python manage.py migrate

      - name: Run tests
        run: |
          poetry run python manage.py test
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker images
        run: |
          docker-compose build

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY}}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY}}
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD}}
        run: |
          sshpass -p "pX^zc-bwLiB9BZ" ssh -v -o StrictHostKeyChecking=no root@194.87.76.153 "cd /root/Homework_DRF && git pull && poetry install && sudo systemctl restart nginx"
